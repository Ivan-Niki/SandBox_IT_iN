/* Task_1 */
<h2 style="color: red;">CatPhotoApp</h2>

/* Task_2 */
<style>
  h2 {
    color: blue;
  }
</style>
<h2>CatPhotoApp</h2>

/* Task_3 ==> Use a CSS Class to Style an Element */
<style>
  .red-text {
    color: red;
  }
</style>

<h2 class="red-text">CatPhotoApp</h2>
<main>
  <p>Click here to view more <a href="#">cat photos</a>.</p>

/* Task_4 ==> Style Multiple Elements with a CSS Class */
<style>
  .red-text {
    color: red;
  }
</style>

<h2 class="red-text">CatPhotoApp</h2>
<main>
  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>

/* Task_5 ==> Change the Font Size of an Element */
<style>
  .red-text {
    color: red;
  }
  p {
    font-size: 16px;
  }
</style>

<h2 class="red-text">CatPhotoApp</h2>
<main>
<p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>

/* Task_6 ==> Set the Font Family of an Element */
<style>
  .red-text {
    color: red;
  }

  p {
    font-size: 16px;
    font-family: monospace;
  }
</style>

<h2 class="red-text">CatPhotoApp</h2>
<main>
  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>

/* Task_7 ==>  */


/* Task_8 ==>  */


/* Task_9 ==> Size Your Images */

<style>
  .smaller-image {
    width: 100px;
  }
</style>

<h2 class="red-text">CatPhotoApp</h2>
<main>
  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>

  <a href="#"><img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg" alt="A cute orange cat lying on its back." class="smaller-image"></a>


/* Task_10 ==> Add Borders Around Your Elements */ 

<style>
.thick-green-border {
  border-color: green;
  border-width: 10px;
  border-style: solid;
}
</style>

<a href="#"><img class="smaller-image thick-green-border" src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg" alt="A cute orange cat lying on its back."></a>


/* Task_11 ==> Add Rounded Corners with border-radius */

<style>
.smaller-image {
  width: 100px;
  border-radius: 10px;
}
</style>

/* Task_12 ==> Make Circular Images with a border-radius */

<style>
.thick-green-border {
  border-color: green;
  border-width: 10px;
  border-style: solid;
  border-radius: 50%;
}
</style>

/* Task_13 ==> Give a Background Color to a div Element */

<style>
.silver-background {
  background-color: silver;
}
</style>

<div class="silver-background">
    <p>Things cats love:</p>
    <ul>
      <li>cat nip</li>
      <li>laser pointers</li>
      <li>lasagna</li>
    </ul>
    <p>Top 3 things cats hate:</p>
    <ol>
      <li>flea treatment</li>
      <li>thunder</li>
      <li>other cats</li>
    </ol>
  </div>

  /* Task_14 ==> Set the id of an Element */

  <form action="https://freecatphotoapp.com/submit-cat-photo" id="cat-photo-form">
    <label><input type="radio" name="indoor-outdoor" checked> Indoor</label>
    <label><input type="radio" name="indoor-outdoor"> Outdoor</label><br>
    <label><input type="checkbox" name="personality" checked> Loving</label>
    <label><input type="checkbox" name="personality"> Lazy</label>
    <label><input type="checkbox" name="personality"> Energetic</label><br>
    <input type="text" placeholder="cat photo URL" required>
    <button type="submit">Submit</button>
  </form>

  /* Task_15 ==> Use an id Attribute to Style an Element */
  
  <style>
  #cat-photo-form {
    background-color: green;
  }
  </style>

/* Task_16 ==> Adjust the Padding of an Element */
<style>
  .injected-text {
    margin-bottom: -25px;
    text-align: center;
  }

  .box {
    border-style: solid;
    border-color: black;
    border-width: 5px;
    text-align: center;
  }

  .yellow-box {
    background-color: yellow;
    padding: 10px;
  }

  .red-box {
    background-color: crimson;
    color: #fff;
    padding: 20px;
  }

  .blue-box {
    background-color: blue;
    color: #fff;
    padding: 20px;
  }
</style>
<h5 class="injected-text">margin</h5>

/* Task_17 ==> Adjust the Margin of an Element */
<style>
  .injected-text {
    margin-bottom: -25px;
    text-align: center;
  }

  .box {
    border-style: solid;
    border-color: black;
    border-width: 5px;
    text-align: center;
  }

  .yellow-box {
    background-color: yellow;
    padding: 10px;
  }

  .red-box {
    background-color: crimson;
    color: #fff;
    padding: 20px;
    margin: 20px;
  }

  .blue-box {
    background-color: blue;
    color: #fff;
    padding: 20px;
    margin: 20px;
  }
</style>
<h5 class="injected-text">margin</h5>

<div class="box yellow-box">
  <h5 class="box red-box">padding</h5>
  <h5 class="box blue-box">padding</h5>
</div>

/* Task_18 ==> Add a Negative Margin to an Element */
.blue-box {
  background-color: blue;
  color: #fff;
  padding: 20px;
  margin: -15px;
}

/* Task_19 ==> Add Different Padding to Each Side of an Element */
.blue-box {
  background-color: blue;
  color: #fff;
  padding-top: 40px;
  padding-right: 20px;
  padding-bottom: 20px;
  padding-left: 40px;
}

/* Task_20 ==> Add Different Margins to Each Side of an Element */ 
.blue-box {
  background-color: blue;
  color: #fff;
  margin-top: 40px;
  margin-right: 20px;
  margin-bottom: 20px;
  margin-left: 40px;
}

/* Task_21 ==> Use Clockwise Notation to Specify the Margin of an Element */ 
blue-box {
  background-color: blue;
  color: #fff;
  padding: 40px 20px 20px 40px;
}

/* Task_22 ==> Use Clockwise Notation to Specify the Margin of an Element */ 
.blue-box {
  background-color: blue;
  color: #fff;
  margin: 40px 20px 20px 40px;
}

/* Task_23 ==> Use Attribute Selectors to Style Elements */ 
[type="checkbox"] {
  margin-top: 10px;
  margin-bottom: 15px;
}

/* Task_24 ==> Style the HTML Body Element */
<style>
  body {
    background-color: black;
  }
</style>

/* Task_25 ==> Inherit Styles from the Body Element */
<style>
  body {
    background-color: black;
    color: green;
    font-family: monospace;
  }
</style>

<h1>Hello World</h1>

/* Task_26 ==> Prioritize One Style Over Another */
<style>
  .pink-text {
    color: pink;
  }
  
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
</style>
<h1 class="pink-text">Hello World!</h1>

/* Task_27 ==> Override Styles in Subsequent CSS */
<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
</style>
<h1 class="pink-text blue-text">Hello World!</h1>


/* Task_28 ==> Use RGB values to Color Elements */
<style>
  body {
    background-color: rgb(0, 0, 0);
  }
</style>

/* Task_29 ==> Use RGB to Mix Colors */
<style>
  .red-text {
    color: rgb(255, 0, 0);
  }
  .orchid-text {
    color: rgb(218, 112, 214);
  }
  .sienna-text {
    color: rgb(160, 82, 45);
  }
  .blue-text {
    color: rgb(0, 0, 255);
  }
</style>

<h1 class="red-text">I am red!</h1>

<h1 class="orchid-text">I am orchid!</h1>

<h1 class="sienna-text">I am sienna!</h1>

<h1 class="blue-text">I am blue!</h1>

/* Task_30 ==> Use Hex Code for Specific Colors */
<style>
  body {
    background-color: #000000;
  }
</style>

/* Task_31 ==> Use Hex Code to Mix Colors */
<style>
  .red-text {
    color: #FF0000;
  }
  .green-text {
    color: #00FF00;
  }
  .dodger-blue-text {
    color: #1E90FF;
  }
  .orange-text {
    color: #FFA500;
  }
</style>

<h1 class="red-text">I am red!</h1>

<h1 class="green-text">I am green!</h1>

<h1 class="dodger-blue-text">I am dodger blue!</h1>

<h1 class="orange-text">I am orange!</h1>

/* Task_32 ==> Use Abbreviated Hex Code */
<style>
  .red-text {
    color: #F00;
  }
  .fuchsia-text {
    color: #F0F;
  }
  .cyan-text {
    color: #0FF;
  }
  .green-text {
    color: #0F0;
  }
</style>

<h1 class="red-text">I am red!</h1>

<h1 class="fuchsia-text">I am fuchsia!</h1>

<h1 class="cyan-text">I am cyan!</h1>

<h1 class="green-text">I am green!</h1>

/* Task_33 ==> Override Class Declarations by Styling ID Attributes */
<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  #orange-text {
    color: orange;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
  
</style>
<h1 id="orange-text" class="pink-text blue-text">Hello World!</h1>

/* Task_34 ==> Override Class Declarations with Inline Styles */
<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  #orange-text {
    color: orange;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
</style>
<h1 id="orange-text" class="pink-text blue-text" style="color: white";>Hello World!</h1>

/* Task_35 ==> Override All Other Styles by using Important */
<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  #orange-text {
    color: orange;
  }
  .pink-text {
    color: pink !important;
  }
  .blue-text {
    color: blue;
  }
</style>
<h1 id="orange-text" class="pink-text blue-text" style="color: white">Hello World!</h1>


/* Task_36 ==> Import a Google Font */
<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">
<style>
  .red-text {
    color: red;
  }

  p {
    font-size: 16px;
    font-family: monospace;
  }

  h2 {
    font-family: Lobster;
  }
</style>

<h2 class="red-text">CatPhotoApp</h2>

/* Task_37 ==> Specify How Fonts Should Degrade */
<!--<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">-->
<style>
  .red-text {
    color: red;
  }

  h2 {
    font-family: Lobster, monospace;
  }
  

/* Task_37 ==> Use CSS Variables to change several elements at once */
  <style>
  .penguin {

    /* Only change code below this line */
    --penguin-skin: gray;
    --penguin-belly: white;
    --penguin-beak: orange;
    /* Only change code above this line */

    /* Task_38 ==> Understand Absolute versus Relative Units */
    .red-box {
      background-color: red;
      margin: 20px 40px 20px 40px;
      padding: 1.5em
  
    }

    /* Task_39 ==> Create a custom CSS Variable */
    .penguin {
      /* Only change code below this line */
      --penguin-skin: gray;
      /* Only change code above this line */
      position: relative;
      margin: auto;
      display: block;
      margin-top: 5%;
      width: 300px;
      height: 300px;
    }

    /* Task_40 ==> Use a custom CSS Variable */
    .penguin-top {
      background: var(--penguin-skin);
      top: 10%;
      left: 25%;

    /* Task_41 ==> Attach a Fallback value to a CSS Variable */
       /* Change code below this line */
    background: var(--pengiun-skin, black);
    /* Change code above this line */

    /* Change code below this line */
    background: var(--pengiun-skin, black);
    /* Change code above this line */

    /* Task_42 ==> Improve Compatibility with Browser Fallbacks */
    <style> :root {
        --red-color: red;
      }
    
      .red-box {
        background: red;
        background: var(--red-color);
        height: 200px;
        width: 200px;
      }
    
      </style><div class="red-box"></div>

    /* Task_43 ==> Inherit CSS Variables */
      <style>
      :root {
        /* Only change code below this line */
    --penguin-belly: pink;
        /* Only change code above this line */
      }
    
      body {
        background: var(--penguin-belly, #c6faf1);
      }

    /* Task_44 ==> Change a variable for a specific area */

    .penguin {
        /* Only change code below this line */
        --penguin-belly: white;
        /* Only change code above this line */
        position: relative;
        margin: auto;
        display: block;
        margin-top: 5%;
        width: 300px;
        height: 300px;
      }


    /* Task_45 ==>  Use a media query to change a variable */

  <style>
  :root {
    --penguin-size: 300px;
    --penguin-skin: gray;
    --penguin-belly: white;
    --penguin-beak: orange;
  }

  @media (max-width: 350px) {
    :root {
      /* Only change code below this line */
    --penguin-size: 200px;
    --penguin-skin: black;
      /* Only change code above this line */
    }
  }



            /* APPLIED VISUAL DESIGN */
  /* Task_1 ==> Create Visual Balance Using the text-align Property */        
  
  <style>
  h4 {
text-align: center;
  }
  p {
text-align: justify;
  }
  </style>


/* Task_2 ==> Adjust the Width of an Element Using the width Property */   
.fullCard {
  width: 245px;
  border: 1px solid #ccc;
  border-radius: 5px;
  margin: 10px 5px;
  padding: 4px;
}

/* Task_3 ==> Adjust the Height of an Element Using the height Property */
h4 {
  text-align: center;
  height: 25px;
}

/* Task_4 ==> Use the strong Tag to Make Text Bold */
<p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>

/* Task_5 ==> Use the u Tag to Underline Text */
<p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>

/* Task_6 ==> Use the em Tag to Italicize Text */
<p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>

/* Task_7 ==> Use the s Tag to Strikethrough Text */
<h4><s>Google</s> Alphabet</h4>

/* Task_8 ==> Create a Horizontal Line Using the hr Element */
<h4><s>Google</s>Alphabet</h4>
<hr>

/* Task_9 ==> Adjust the background-color Property of Text */
h4 {
  text-align: center;
  padding: 10px;
  background-color: rgba(45, 45, 45, 0.1);
}

/* Task_10 ==> Adjust the Size of a Heading Element Versus a Paragraph Element */
h4 {
  text-align: center;
  background-color: rgba(45, 45, 45, 0.1);
  padding: 10px;
  font-size: 27px;
}

/* Task_11 ==> Add a box-shadow to a Card-like Element */
#thumbnail {
  box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
}

/* Task_12 ==> Decrease the Opacity of an Element */
.links {
  text-align: left;
  color: black;
  opacity: 0.7;
}

/* Task_13 ==> Use the text-transform Property to Make Text Uppercase */
h4 {
  text-align: center;
  background-color: rgba(45, 45, 45, 0.1);
  padding: 10px;
  font-size: 27px;
  text-transform: uppercase;
}

/* Task_14 ==> Set the font-size for Multiple Heading Elements */
<style>
h1 {
  font-size: 68px;
}
h2 {
  font-size: 52px;
}
h3 {
  font-size: 40px;
}
h4 {
  font-size: 32px;
}
h5 {
  font-size: 21px;
}
h6 {
  font-size: 14px;
}
</style>

/* Task_15 ==> Set the font-weight for Multiple Heading Elements */
<style>
  h1 {
    font-size: 68px;
    font-weight: 800;
  }
  h2 {
    font-size: 52px;
    font-weight: 600;
  }
  h3 {
    font-size: 40px;
    font-weight: 500;
  }
  h4 {
    font-size: 32px;
    font-weight: 400;
  }
  h5 {
    font-size: 21px;
    font-weight: 300;
  }
  h6 {
    font-size: 14px;
    font-weight: 200;
  }
</style>

/* Task_16 ==> Set the font-size of Paragraph Text */
<style>
  p {
    font-size: 16px;
  }
</style>


/* Task_17 ==> Set the line-height of Paragraphs */
<style>
  p {
    font-size: 16px;
    line-height: 25px;
  }
</style>


/* Task_18 ==> Adjust the Hover State of an Anchor Tag */
<style>
  a {
    color: #000;
  }

a:hover {
  color: blue;
}
</style>

/* Task_19 ==> Change an Element's Relative Position */
<style>
  h2 {
  position: relative;
  top: 15px;
  }
</style>
<body>
  <h1>On Being Well-Positioned</h1>
  <h2>Move me!</h2>
  <p>I still think the h2 is where it normally sits.</p>
</body>

/* Task_20 ==> Move a Relatively Positioned Element with CSS Offsets */
<head>
<style>
  h2 {
    position: relative;
    left: 15px;
    bottom: 10px;

  }
</style>
</head>

/* Task_21 ==> Lock an Element to its Parent with Absolute Positioning */
<style>
  #searchbar {
    position: absolute;
    top: 50px;
    right: 50px;
  }
  section {
    position: relative;
  }
</style>

/* Task_22 ==> Lock an Element to the Browser Window with Fixed Positioning */
#navbar {
position: fixed;
top: 0px;
left: 0px;
width: 100%;
background-color: #767676;
}

/* Task_23 ==> Push Elements Left or Right with the float Property */
<style>
    #left {
      float: left;
      width: 50%;
    }
    #right {
      float: right;
      width: 40%;
    }
    aside, section {
      padding: 2px;
      background-color: #ccc;
    }
  </style>

/* Task_24 ==> Change the Position of Overlapping Elements with the z-index Property */
.first {
  background-color: red;
  position: absolute;
  z-index: 2;

/* Task_25 ==> Center an Element Horizontally Using the margin Property */
div {
  background-color: blue;
  height: 100px;
  width: 100px;
  margin: auto;
}

/* Task_26 ==> Learn about Complementary Colors */
.blue {
  background-color: blue;
}
.yellow {
  background-color: yellow;
}

/* Task_27 ==> Learn about Tertiary Colors */
.orange {
  background-color: #FF7F00;
}

.cyan {
  background-color: #00FFFF;
}

.raspberry {
  background-color: #FF007F;
}

/* Task_28 ==>  */

/* Task_29 ==>  */

/* Task_30 ==>  */




                    /* CSS FLEXBOX */

/* Task_1 ==> Use display: flex to Position Two Boxes */

<style>
  #box-container {
    height: 500px;
    display: flex;
  }
</style>


/* Task_2 ==> Add Flex Superpowers to the Tweet Embed */
header .profile-name {
  display: flex;
  margin-left: 10px;
}
header .follow-btn {
  display: flex;
  margin: 0 0 0 auto;
}

/* Task_3 ==> Use the flex-direction Property to Make a Row */
<style>
  #box-container {
    display: flex;
    height: 500px;
    flex-direction: row-reverse;
  }
</style>

/* Task_4 ==> Apply the flex-direction Property to Create Rows in the Tweet Embed */
header {
  display: flex;
  flex-direction: row;
}

/* Task_5 ==> Use the flex-direction Property to Make a Column */
<style>
  #box-container {
    display: flex;
    height: 500px;
    flex-direction: column;
  }
  #box-1 {
    background-color: dodgerblue;
    width: 50%;
    height: 50%;
  }

  #box-2 {
    background-color: orangered;
    width: 50%;
    height: 50%;
  }
</style>

<div id="box-container">
  <div id="box-1"></div>
  <div id="box-2"></div>
</div>

/* Task_6 ==>  */


/* Task_7 ==>  */


/* Task_8 ==>  */


