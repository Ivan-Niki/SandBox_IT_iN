// ---------- LESSON-2 ----------
/* 
1) Как создаются переменные и зачем нужны
2) Типы данных в js
3) Оператор typeof
4) Комментарии 
*/

// ---- ПЕРЕМЕННЫЕ В JS ----

/* В JavaScript есть два ограничения, касающиеся имён переменных:

1) Имя переменной должно содержать только буквы, цифры или символы $ и _.
2) Первый символ не должен быть цифрой. 

Особенности и рекомендации для именования переменных в JS:
-> CamelСase
Если имя содержит несколько слов, обычно используется CamelСase (верблюжья нотация), то есть, слова следуют одно за другим, где каждое следующее слово начинается с заглавной буквы: myVeryLongName.

-> Регистр имеет значение
Переменные с именами apple и APPLE – это две разные переменные.

-> Зарезервированные имена
Существует список зарезервированных слов, которые нельзя использовать в качестве имён переменных, потому что они используются самим языком.
Например: let, class, return и function зарезервированы.

*/

const userName = 'Ivan';
console.log(userName);

console.log(typeof userName);


// Различия между const, let и var


// ================= УРОК 5. Условные ветвления в JS. Конструкция If else и тернарный оператор ================

// Инструкция if (...) вычисляет условие в скобках и, если результат true, то выполняет блок кода. Например:

let year1 = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');

if (year1 == 2015) {
  alert('Вы правы!');
}

if (year1 == 2015) {
  alert("Правильно!");
  alert("Вы такой умный!");
}

//                   ----------- Блок «else» ------------
// Инструкция if может содержать необязательный блок «else» («иначе»). Он выполняется, когда условие ложно. Например:

let year2 = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');

if (year2 == 2015) {
  alert('Да вы знаток!');
} else {
  alert('А вот и неправильно!'); // любое значение, кроме 2015
}

//                 ----------- Несколько условий: «else if» ------------
// Иногда нужно проверить несколько вариантов условия.Для этого используется блок else if. Например:

let year3 = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');

if (year3 < 2015) {
  alert('Это слишком рано...');
} else if (year3 > 2015) {
  alert('Это поздновато');
} else {
  alert('Верно!');
}

/* В приведённом выше коде JavaScript сначала проверит year < 2015. Если это неверно, он переходит к следующему условию year > 2015. Если оно тоже ложно, тогда сработает последний alert.
Блоков else if может быть и больше.Присутствие блока else не является обязательным. */


//               ----------- Тернарный оператор в JavaScript -----------

/* Тернарный оператор в JavaScript представляет собой альтернативный способ записи условных выражений с использованием конструкции if...else. Он позволяет выполнить одно из двух действий в зависимости от истинности или ложности условия.
  Синтаксис:
условие ? выражение1 : выражение2
Если условие истинно, то возвращается выражение1, если ложно - выражение2. Например: */

const age = 20;
const message = age >= 18 ? "Совершеннолетний" : "Несовершеннолетний";
console.log(message); // Выведет: "Совершеннолетний" (потому что условие age >= 18 является истинным)

// В этом примере, если возраст age больше или равен 18, будет возвращена строка "Совершеннолетний", иначе - "Несовершеннолетний".


// =================== Взаимодействие: alert, prompt, confirm =================

// Так как мы будем использовать браузер как демо - среду, нам нужно познакомиться с несколькими функциями его 
// интерфейса, а именно: alert, prompt и confirm.

// ------ alert --------
// С этой функцией мы уже знакомы.Она показывает сообщение и ждёт, пока пользователь нажмёт кнопку «ОК». Например:

alert("Hello");
// Это небольшое окно с сообщением называется модальным окном.Понятие модальное означает, что пользователь не может
// взаимодействовать с интерфейсом остальной части страницы, нажимать на другие кнопки и т.д.до тех пор, пока
// взаимодействует с окном.В данном случае – пока не будет нажата кнопка «OK».

// ------ prompt -------
// Функция prompt принимает два аргумента:
// result = prompt(title, [default]);
// Этот код отобразит модальное окно с текстом, полем для ввода текста и кнопками OK / Отмена.
// title - Текст для отображения в окне.
// default - Необязательный второй параметр, который устанавливает начальное значение в поле для текста в окне.

// Вызов prompt возвращает текст, указанный в поле для ввода, или null, если ввод отменён пользователем. Например:

let userAge = prompt('Сколько тебе лет?', 30);
alert(`Тебе ${userAge} лет!`); // Тебе 30 лет!

// ------ confirm
// Синтаксис:
result = confirm(question);
// Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
//   Результат – true, если нажата кнопка OK.В других случаях – false. Например:

let isBoss = confirm("Ты здесь главный?");
alert(isBoss); // true, если нажата OK



// ========================== ЦИКЛЫ в JS (while, do while и for) ==========================
// При написании скриптов зачастую встаёт задача сделать однотипное действие много раз.
// Например, вывести товары из списка один за другим.Или просто перебрать все числа от 1 до 10 и для каждого выполнить одинаковый код.
// Для многократного повторения одного участка кода предусмотрены циклы.

// ---------- Цикл while -----------
// Цикл while имеет следующий синтаксис:

while (condition) {
  // код
  // также называемый "телом цикла"
}
// Код из тела цикла выполняется, пока условие condition истинно. Например, цикл ниже выводит i, пока i < 3:

let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
  alert(i);
  i++;
}
// Одно выполнение тела цикла по - научному называется итерация.Цикл в примере выше совершает три итерации.

// Любое выражение или переменная может быть условием цикла, а не только сравнение: условие while вычисляется и преобразуется в логическое значение.

//   Например, while (i) – более краткий вариант while (i != 0):

let i = 3;
while (i) { // когда i будет равно 0, условие станет ложным, и цикл остановится
  alert(i);
  i--;
}

// Фигурные скобки не требуются для тела цикла из одной строки
// Если тело цикла состоит лишь из одной инструкции, мы можем опустить фигурные скобки {…}. Например:

let i = 3;
while (i) alert(i--);

// ------------ Цикл «do…while» -------------
// Проверку условия можно разместить под телом цикла, используя специальный синтаксис do..while:

do {
  // тело цикла
} while (condition);
// Цикл сначала выполнит тело, а затем проверит условие condition, и пока его значение равно true, он будет выполняться снова и снова. Например:

let i = 0;
do {
  alert(i);
  i++;
} while (i < 3);
// Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось хотя бы один раз, даже если
// условие окажется ложным.На практике чаще используется форма с предусловием: while (…) {…}.

// -------------------- Цикл «for» -----------------
// Более сложный, но при этом самый распространённый цикл — цикл for. Выглядит он так:

for (начало; условие; шаг) {
  // ... тело цикла ...
}

// Давайте разберёмся, что означает каждая часть, на примере. Цикл ниже выполняет alert(i) для i от 0 до (но не включая) 3:

for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
  alert(i);
}

/* Рассмотрим конструкцию for подробней:

начало	     let i = 0	 Выполняется один раз при входе в цикл
условие	     i < 3	     Проверяется перед каждой итерацией цикла. Если оно вычислится в false, цикл остановится.
тело	       alert(i)	   Выполняется снова и снова, пока условие вычисляется в true.
шаг	         i++	       Выполняется после тела цикла на каждой итерации перед проверкой условия. */


// let str = "Hello";
// for (let i = 0; i <= 5; i++) {
//   alert(str);
//   str += "o";
// }


// ----------------------- Инструкции (директивы) break и continue ---------------------

// ----- Оператор break: прерывание цикла -----
// Иногда бывает необходимо выйти из цикла до его завершения.В этом случае мы можем воспользоваться оператором break
let num = 0;
for (; num < 5; num++) {
  console.log(num);
  if (num == 3) break;
}
console.log(`Работа окончена, num = ${num}`);


// ----- Оператор continue: переход к следующей итерации цикла -----
// Если нам надо просто пропустить итерацию, но не выходить из цикла, мы можем применять оператор continue.Например:
for (let i = 1; i <= 6; i++) {
  if (i === 4) continue;
  console.log(i);
}
console.log("Конец работы");

// Например, цикл ниже использует continue, чтобы выводить только нечётные значения:
for (let i = 0; i < 10; i++) {
  // если true, пропустить оставшуюся часть тела цикла
  if (i % 2 == 0) continue;
  alert(i); // 1, затем 3, 5, 7, 9
}
// Для чётных значений i, директива continue прекращает выполнение тела цикла и передаёт управление на следующую
// итерацию for (со следующим числом).Таким образом alert вызывается только для нечётных значений.



// ====================== Конкатенация строк. Шаблонные строки и интерполяция ======================




// ====================== Функции в JavaScript ======================

/* Функции в JavaScript - это блоки кода, которые могут быть вызваны для выполнения определенных задач. 
Они представляют собой участки кода, которые могут принимать параметры (входные данные для описания функции), 
выполнять определенные операции и возвращать результат (выходные данные). 
Любая функция в JavaScript является объектом, а следовательно может быть передана в виде аргумента (входные данные 
для выполнения функции) другой функции, быть возвращена в качестве результата работы другой функции и присвоена в 
качестве значения переменной или свойства объекта. */

// ------ Function Declaration (Объявление функции) ------

/* Функцию можно объявить с помощью ключевого слова function через пробел после которого идет название функции, 
круглые скобки с перечисленными внутри параметрами и фигурные скобки с описанием кода (код функции также называют 
«телом функции»), который будет срабатывать при вызове функции. При таком объявлении функция вернет значение только 
если оно указано после инструкции return а вызвать функцию можно из любой части кода (даже до объявления самой 
функции), указав ее имя и после него в скобках аргументы. */

//вызываем функцию до объявления
console.log(greeting("Stan"));//The name is Stan
//в консоли так же выведется Hello Stan!
function greeting(name) {
  //в фигурных скобках описывается код, который будет исполнен при вызове функции
  console.log("Hello " + name + "!");
  return "The name is " + name;
}

/* В теле функции(внутри фигурных скобок после перечня параметров) может быть записан любой код с созданием условий, 
объектов и даже других функций. Выходные данные могут зависеть от этих условий, аргументов или хода исполнения кода 
в теле функции, поэтому исполнение кода прекращается после первой выполненной инструкции`return`. */

function checkDay(day) {
  if (day === "Saturday" || day === "Sunday") {
    return "Weekend";//возвращаемое значение при выполнении условия
  }
  return "Weekday"; //возвращаемое значение при невыполнении условия
}

// ------------- Function Expressions: функциональные выражения -------------
/* Как мы уже знаем, функция это объект, а значит может быть задана в качестве значения переменной (”const a = function b() { }”). 
При таком объявлении мы получаем возможность присвоить функцию в качестве свойства объекта и создавать безымянные 
функции, которые будут вызываться через имя переменной или свойства объекта, которым они присвоены как значения. */
myObj.sayHello = function () {//создаем безымянную функцию
  console.log("Hello!");
};//передадим эту функцию как значение свойства 
myObj.sayHello(); //Hello!

// -------- Параметры ---------
// Мы можем передать внутрь функции любую информацию, используя параметры.
// В нижеприведённом примере функции передаются два параметра: from и text.

function showMessage(from, text) { // параметры: from, text
  alert(from + ': ' + text);
}

showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)

/* Значение, передаваемое в качестве параметра функции, также называется аргументом.
Другими словами:
Параметр – это переменная, указанная в круглых скобках в объявлении функции.
Аргумент – это значение, которое передаётся функции при её вызове.
Мы объявляем функции со списком параметров, затем вызываем их, передавая аргументы. */


// --------- Значения по умолчанию -----------
// Если при вызове функции аргумент не был указан, то его значением становится undefined.
// Например, вышеупомянутая функция showMessage(from, text) может быть вызвана с одним аргументом:

showMessage("Аня");
// Это не приведёт к ошибке.Такой вызов выведет "*Аня*: undefined". В вызове не указан параметр text, поэтому предполагается, что text === undefined.

// Если мы хотим задать параметру text значение по умолчанию, мы должны указать его после =:

function showMessage(from, text = "текст не добавлен") {
  alert(from + ": " + text);
}

showMessage("Аня"); // Аня: текст не добавлен
// Теперь, если параметр text не указан, его значением будет "текст не добавлен".


// ------------ Возврат значения -------------
// Функция может вернуть результат, который будет передан в вызвавший её код.
// Простейшим примером может служить функция сложения двух чисел:

function sum(a, b) {
  return a + b;
}

let result = sum(1, 2);
alert(result); // 3

// Директива return может находиться в любом месте тела функции.Как только выполнение доходит до этого места,
// функция останавливается, и значение возвращается в вызвавший её код(присваивается переменной result выше).






// ===================== МЕТОДЫ ПРИМИТИВОВ =======================

/* JavaScript позволяет нам работать с примитивными типами данных – строками, числами и т.д., как будто они являются объектами.У них есть и методы.Мы изучим их позже, а сначала разберём, как это всё работает, потому что, конечно, примитивы – не объекты. 
Есть 7 примитивных типов: string, number, boolean, symbol, null, undefined и bigint */

// ------------- МЕТОДЫ ЧИСЛА ----------

// В JavaScript также существует набор методов, которые можно использовать для работы с числами.
// Например, метод toFixed() позволяет округлить число до указанного количества десятичных знаков. 
// Метод toFixed()форматирует число, округляя его до n знаков после запятой и возвращая строковое представление. 

const number = 3.14159;
console.log(number.toFixed(2)); // Выведет: 3.14



// -------------- Объект Math в JavaScript --------------
/* Объект Math - это встроенный модуль в JavaScript, который предоставляет множество математических функций.
С помощью объекта Math вы можете выполнять операции, такие как округление чисел, вычисление тригонометрических 
функций, генерация случайных чисел и многое другое. */

// ------ Форма записи ------
// Вызов функций объекта Math осуществляется через точку после имени объекта, например:

Math.round(2.4); // Возвращает 2
Math.sin(Math.PI / 2); // Возвращает 1
Math.random(); // Возвращает случайное число от 0 до 1

// -------------- abs() ---------------
// Функция abs() возвращает абсолютное значение числа:
const x = -25;
console.log(Math.abs(x)); // 25
const y = 34;
console.log(Math.abs(y)); // 34

// --------------min() и max() -------------
// Функции min() и max() возвращают соответственно минимальное и максимальное значение из набора чисел:
const max = Math.max(19, 45); // 45
const min = Math.min(33, 24); // 24

// Эти функции необязательно должны принимать два числа, в них можно передавать и большее количество чисел:
const max1 = Math.max(1, 2, 3, -9, 46, -23); // 46

// ------------- ceil() -----------
// Функция ceil() округляет число до следующего большего целого числа:

const num1 = Math.ceil(9.2); // 10
const num2 = Math.ceil(-5.9); // -5
// Выражение Math.ceil(9.2) возвращает число 10, так как число 10 следующее наибольшее целое число после 9.2.
// И также выражение Math.ceil(-5.9) возвращает - 5, потому что число - 5 следующее наибольшее целое после - 5.9

// ------------- floor() -------------
// Функция floor() округляет число до следующего меньшего целого числа:

const num3 = Math.floor(9.2); // 9
const num4 = Math.floor(-5.9); // -6

// ------------- round() -------------
// Функция round() округляет число до следующего наименьшего целого числа, если его десятичная часть меньше 0.5.
// Если же десятичная часть равна или больше 0.5, то округление идет до ближайшего наибольшего целого числа:

const num_1 = Math.round(5.5); // 6
const num_2 = Math.round(5.4); // 5
const num_3 = Math.round(-5.4); // -5

// ------------- random() -------------
// Функция random() возвращает случайное число с плавающей точкой их диапазона от 0 до 1:
const num_4 = Math.random();

// ------------- pow() -------------
// Функция pow() возвращает число в определенной степени. Например, возведем число 2 в степень 3:
const num_5 = Math.pow(2, 3); // 8





/* Методы округления:
Math.round(x):
Округляет число x до ближайшего целого.
  Math.floor(x):
Округляет число x до ближайшего меньшего целого(вниз).
  Math.ceil(x):
Округляет число x до ближайшего большего целого(вверх).
  Math.trunc(x):
Удаляет дробную часть числа x, возвращая целую часть. */

