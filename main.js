// ---------- LESSON-2 ----------
/* 
1) Как создаются переменные и зачем нужны
2) Типы данных в js
3) Оператор typeof
4) Комментарии 
*/

// ---- ПЕРЕМЕННЫЕ В JS ----

/* В JavaScript есть два ограничения, касающиеся имён переменных:

1) Имя переменной должно содержать только буквы, цифры или символы $ и _.
2) Первый символ не должен быть цифрой. 

Особенности и рекомендации для именования переменных в JS:
-> CamelСase
Если имя содержит несколько слов, обычно используется CamelСase (верблюжья нотация), то есть, слова следуют одно за другим, где каждое следующее слово начинается с заглавной буквы: myVeryLongName.

-> Регистр имеет значение
Переменные с именами apple и APPLE – это две разные переменные.

-> Зарезервированные имена
Существует список зарезервированных слов, которые нельзя использовать в качестве имён переменных, потому что они используются самим языком.
Например: let, class, return и function зарезервированы.

*/

const userName = 'Ivan';
console.log(userName);

console.log(typeof userName);


// Различия между const, let и var


// ================= УРОК 5. Условные ветвления в JS. Конструкция If else и тернарный оператор ================

// Инструкция if (...) вычисляет условие в скобках и, если результат true, то выполняет блок кода. Например:

let year1 = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');

if (year1 == 2015) {
  alert('Вы правы!');
}

if (year1 == 2015) {
  alert("Правильно!");
  alert("Вы такой умный!");
}

//                   ----------- Блок «else» ------------
// Инструкция if может содержать необязательный блок «else» («иначе»). Он выполняется, когда условие ложно. Например:

let year2 = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');

if (year2 == 2015) {
  alert('Да вы знаток!');
} else {
  alert('А вот и неправильно!'); // любое значение, кроме 2015
}

//                 ----------- Несколько условий: «else if» ------------
// Иногда нужно проверить несколько вариантов условия.Для этого используется блок else if. Например:

let year3 = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');

if (year3 < 2015) {
  alert('Это слишком рано...');
} else if (year3 > 2015) {
  alert('Это поздновато');
} else {
  alert('Верно!');
}

/* В приведённом выше коде JavaScript сначала проверит year < 2015. Если это неверно, он переходит к следующему условию year > 2015. Если оно тоже ложно, тогда сработает последний alert.
Блоков else if может быть и больше.Присутствие блока else не является обязательным. */


//               ----------- Тернарный оператор в JavaScript -----------

/* Тернарный оператор в JavaScript представляет собой альтернативный способ записи условных выражений с использованием конструкции if...else. Он позволяет выполнить одно из двух действий в зависимости от истинности или ложности условия.
  Синтаксис:
условие ? выражение1 : выражение2
Если условие истинно, то возвращается выражение1, если ложно - выражение2. Например: */

const age = 20;
const message = age >= 18 ? "Совершеннолетний" : "Несовершеннолетний";
console.log(message); // Выведет: "Совершеннолетний" (потому что условие age >= 18 является истинным)

// В этом примере, если возраст age больше или равен 18, будет возвращена строка "Совершеннолетний", иначе - "Несовершеннолетний".


// =================== Взаимодействие: alert, prompt, confirm =================

// Так как мы будем использовать браузер как демо - среду, нам нужно познакомиться с несколькими функциями его 
// интерфейса, а именно: alert, prompt и confirm.

// ------ alert --------
// С этой функцией мы уже знакомы.Она показывает сообщение и ждёт, пока пользователь нажмёт кнопку «ОК». Например:

alert("Hello");
// Это небольшое окно с сообщением называется модальным окном.Понятие модальное означает, что пользователь не может
// взаимодействовать с интерфейсом остальной части страницы, нажимать на другие кнопки и т.д.до тех пор, пока
// взаимодействует с окном.В данном случае – пока не будет нажата кнопка «OK».

// ------ prompt -------
// Функция prompt принимает два аргумента:
// result = prompt(title, [default]);
// Этот код отобразит модальное окно с текстом, полем для ввода текста и кнопками OK / Отмена.
// title - Текст для отображения в окне.
// default - Необязательный второй параметр, который устанавливает начальное значение в поле для текста в окне.

// Вызов prompt возвращает текст, указанный в поле для ввода, или null, если ввод отменён пользователем. Например:

let userAge = prompt('Сколько тебе лет?', 30);
alert(`Тебе ${userAge} лет!`); // Тебе 30 лет!

// ------ confirm
// Синтаксис:
result = confirm(question);
// Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
//   Результат – true, если нажата кнопка OK.В других случаях – false. Например:

let isBoss = confirm("Ты здесь главный?");
alert(isBoss); // true, если нажата OK



// ========================== ЦИКЛЫ в JS (while, do while и for) ==========================
// При написании скриптов зачастую встаёт задача сделать однотипное действие много раз.
// Например, вывести товары из списка один за другим.Или просто перебрать все числа от 1 до 10 и для каждого выполнить одинаковый код.
// Для многократного повторения одного участка кода предусмотрены циклы.

// ---------- Цикл while -----------
// Цикл while имеет следующий синтаксис:

while (condition) {
  // код
  // также называемый "телом цикла"
}
// Код из тела цикла выполняется, пока условие condition истинно. Например, цикл ниже выводит i, пока i < 3:

let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
  alert(i);
  i++;
}
// Одно выполнение тела цикла по - научному называется итерация.Цикл в примере выше совершает три итерации.

